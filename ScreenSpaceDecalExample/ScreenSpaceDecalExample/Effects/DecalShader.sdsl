shader DecalShader
    : DepthBase, ShaderBase, Transformation, PositionStream4, ComputeColor, ObjectInfoInputShader,
        NormalUpdate
{
    // We must inherit ComputeColor, even if we don't use it explicitly, because this is required by the Material.
    // The first row of inheritance is to handle our decal box projection, the second row of inheritance is to handle
    // lighting information.

    rgroup PerMaterial
    {
        stage Texture2D DecalTexture;
    }

    cbuffer PerMaterial
    {
        stage float TextureScale = 1.0f;
        [Color]
        stage float4 TintColor;
        stage uint IgnoreRenderGroups;
        stage bool IsAffectedByShadow;
        stage float3 ProjectorUpDirection;
    }

    stage stream float4 PositionInViewSpace;  // Shader position in View Space

    stage stream float4 PS_DecalColor;

    // Vertex Shader
    stage override void VSMain()
    {
        // We need to set meshNormal here (BEFORE base.VSMain()) because the lighting shader uses this field
        // in the vertex shader stage to calculate a bunch of lighting information.
        // We override the mesh's normal to the box projector's up direction, because we don't want the
        // lighting shader to shade the 'side' of the box, since it doesn't exist because we're doing a projection.
        // A more realistic option would be to somehow get the normal surface that we're projected on,
        // however I don't know how to get that information, so this will suffice!
        streams.meshNormal = ProjectorUpDirection;
        //streams.meshTangent = ?   // TODO: not sure if this also needs to be set.

        // Because we inherited 'base' shaders, this will assign the other data for us.
        base.VSMain();

        /* Transformation Notes:
            [Position0] * [WorldMatrix] * [ViewMatrix] * [ProjectionMatrix]
            Position0: The object/model's local space
              multiply with WorldMatrix -> Gets to (game) world space
              multiply with ViewMatrix -> Gets to camera's view space (ie. object relative to the camera)
              multiply with ProjectionMatrix -> Gets to screen space

           Multiply by the inverse matrices to go back to the previous spaces.
        */

        // streams.Position is in the box's local space. [This is declared in PositionStream4 shader]
        float4 viewSpacePos = mul(streams.Position, WorldView);
        streams.PositionInViewSpace = viewSpacePos;
        streams.ShadingPosition =  mul(streams.Position, WorldViewProjection);
    }

    // Pixel Shader
    stage override void PSMain()
    {
        // ShadingPosition is the screen space. [This is declared in ShaderBaseStream shader]
        // (0, 0) is the top left corner on the screen. x goes right, y goes down.
        float2 screenPos = streams.ShadingPosition.xy;
        uint objectRenderGroup = GetRenderGroup(screenPos);
        uint objectMask = 1 << objectRenderGroup;
        if ((IgnoreRenderGroups & objectMask) != 0)
        {
            // Don't want to project onto this object.
            discard;
        }

        float2 screenSpaceUv = float2(screenPos.x / ViewSize.x, screenPos.y / ViewSize.y);  // Gets UV in [0..1] range.

        // Get depth value from depth buffer at the point on the screen. [This function comes from DepthBase shader]
        float depthValueInViewSpace = ComputeDepthFromUV(screenSpaceUv);    // Depth position in view space

        float zDepthProportion = -streams.PositionInViewSpace.z / FarClipPlane;    // Between 0...1 when within camera viewing range
        float3 shaderPointRayInViewSpace = streams.PositionInViewSpace.xyz / zDepthProportion;   // Ray is projected out to sit exactly on the far clip plane

        float3 depthPointInViewSpace =  shaderPointRayInViewSpace * (depthValueInViewSpace / FarClipPlane);     // The point from the depth buffer in the view space
        float4 depthPointInWorldSpace = mul(float4(depthPointInViewSpace, 1), ViewInverse);
        float4 depthPointInBoxSpace = mul(depthPointInWorldSpace, WorldInverse);        // The point from the depth buffer in local space of the box

        // Box of length 1, so lies in the range [-0.5...0.5] of every axis.
        // So everything outside this box range is clipped.
        clip(0.5f - abs(depthPointInBoxSpace.xyz));

        // The center of the box is at origin, so we need to offset so we're in UV space (ie. in [0...1] range).
        float2 decalTextCoord = (depthPointInBoxSpace.xz / TextureScale) + 0.5f;
        float4 decalColor = DecalTexture.Sample(AnisotropicSampler, decalTextCoord) * TintColor;
        if (decalColor.w <= 0)
        {
            // We have nothing to display, and since lighting may be expensive, we should exit early.
            discard;
        }

        if (IsAffectedByShadow)
        {
            // Pass the field so it's accessible in the Compute() method.
            streams.PS_DecalColor = decalColor;

            // We call base.PSMain() because the majority of lighting information is calculated via
            // shader inheritance, including the Compute() method below, and assign it to streams.ColorTarget.

            // HACK: We need to force the lighting shader code think we're actually
            // at the depth point's position, instead of the projector box's position,
            // so we change it here to trick the lighting shader code.
            streams.PositionWS = depthPointInWorldSpace;
            base.PSMain();
        }
        else
        {
            // eg. UI projected objects shouldn't be affected by shadows, so color as is and exit.
            streams.ColorTarget = decalColor;
        }
    }

    override float4 Compute()
    {
        return streams.PS_DecalColor;
    }
};
