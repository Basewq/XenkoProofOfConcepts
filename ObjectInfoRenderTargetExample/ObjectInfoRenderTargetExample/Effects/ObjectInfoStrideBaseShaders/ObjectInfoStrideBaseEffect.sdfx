using Stride.Rendering.Data;
using Stride.Rendering.Materials;

namespace ObjectInfoRenderTargetExample.Effects
{
    partial effect ObjectInfoStrideBaseEffect
    {
        // We cannot use StrideForwardShadingEffect because it defines SV_Target0 as float4,
        // which we do not want (refer to notes in ObjectInfoOutputShader.xksl).
        // Because skinned (animated) models are transformed in shaders, we need to copy
        // the behavior of StrideForwardShadingEffect (or most of it), but create our own version whenever
        // the existing shader inherits ShaderBase.

        using params MaterialKeys;
        //using params StrideEffectBaseKeys;

        // -----------------------------------------------
        // Base shaders
        // -----------------------------------------------
        mixin OioShaderBase;
        //mixin OioShadingBase;

        // -----------------------------------------------
        // Mix material per Vertex Shader
        // -----------------------------------------------
        //var extensionPreVertexStageSurfaceShaders = MaterialKeys.VertexStageSurfaceShaders;
        //if (extensionPreVertexStageSurfaceShaders != null)
        //{
        //    // Must come before TransformationBase as this is responsible to modify the vertex input stream
        //    mixin OioMaterialSurfaceVertexStageCompositor;
        //    mixin compose materialVertexStage = (extensionPreVertexStageSurfaceShaders);
        //    mixin compose streamInitializerVertexStage = MaterialKeys.VertexStageStreamInitializer;
        //}

        // -----------------------------------------------
        // Transform vertex stream
        // -----------------------------------------------
        // Come after material surface per vertex
        mixin OioTransformationBase;
        mixin NormalStream;
        mixin OioTransformationWAndVP;

        // -----------------------------------------------
        // Performs normal mapping (in case of no-skinning, otherwise it is overloaded below)
        // -----------------------------------------------
        if (MaterialKeys.HasNormalMap)
        {
            mixin OioNormalFromNormalMapping;
        }
        else
        {
            mixin OioNormalFromMesh;
        }

        // -----------------------------------------------
        // Performs animation skinning (position, normal and tangent)
        // -----------------------------------------------
        if (MaterialKeys.HasSkinningPosition)
        {
            mixin macro MaterialKeys.SkinningMaxBones;
            mixin OioTransformationSkinning;

            if (MaterialKeys.HasSkinningNormal)
            {
                mixin OioNormalMeshSkinning;
            }

            if (MaterialKeys.HasSkinningTangent)
            {
                mixin OioTangentMeshSkinning;
            }

            if (MaterialKeys.HasSkinningNormal)
            {
                if (MaterialKeys.HasNormalMap)
                {
                    mixin OioNormalVSSkinningNormalMapping;
                }
                else
                {
                    mixin OioNormalVSSkinningFromMesh;
                }
            }
        }

        // -----------------------------------------------
        // Mix Extension after vertex stage
        // -----------------------------------------------
        //var extensionPostVertexStage = StrideEffectBaseKeys.ExtensionPostVertexStageShader;
        //if (extensionPostVertexStage != null)
        //{
        //    mixin (extensionPostVertexStage);
        //}

        // -----------------------------------------------
        // MRT output definitions (color0 excluded)
        // -----------------------------------------------
        //var targetExtensions = StrideEffectBaseKeys.RenderTargetExtensions;
        //if (targetExtensions != null)
        //{
        //    mixin (targetExtensions);
        //}
    };
}
